/**
 * Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. 
 * (i.e., from left to right, then right to left for the next level and alternate between).
 * 
 * The number of nodes in the tree is in the range [0, 2000].
 * -100 <= Node.val <= 100
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> lists = new LinkedList<List<Integer>>();
        if(root == null)
            return lists;
        
        List<Integer> list = new LinkedList<Integer>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        TreeNode p = root;
        int level = 1;
        int queueSize;
        while(!queue.isEmpty()) {
            list = new LinkedList<Integer>();
            queueSize = queue.size();
            for(int i = 0; i < queueSize; i++) {
                p = queue.remove();
                if(p.left != null)
                    queue.add(p.left);
                if(p.right != null)
                    queue.add(p.right);
                list.add(p.val);
            }
            if(level % 2 == 0)
                Collections.reverse(list);
            lists.add(list);
            level++;
        }
        return lists;
    }
}
