/**
 * Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
 * 
 * The number of nodes in the tree is in the range [0, 2000].
 * -1000 <= Node.val <= 1000
 */ 
 
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> lists = new LinkedList<List<Integer>>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        
        if(root == null)
            return lists;
        
        queue.add(root);
        List<Integer> list;
        int queueSize;
        TreeNode p;
        while(!queue.isEmpty()) {
            list = new LinkedList<Integer>();
            queueSize = queue.size();
            for(int i = 0; i < queueSize; i++) {
                p = queue.remove();
                list.add(p.val);
                if(p.left != null)
                    queue.add(p.left);
                if(p.right != null)
                    queue.add(p.right);
            }
            lists.add(list);
        }
        return lists;
    }
}
