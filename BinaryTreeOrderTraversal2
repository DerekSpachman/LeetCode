/**
 * Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. 
 * (i.e., from left to right, level by level from leaf to root).
 * 
 * The number of nodes in the tree is in the range [0, 2000].
 * -1000 <= Node.val <= 1000
 */
 
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> lists = new LinkedList();
        if(root == null)
            return lists;
        
        List<Integer> list;
        Queue<TreeNode> top = new LinkedList();
        top.add(root);
        Stack<List<Integer>> bottomLevel = new Stack();
        int topLength;
        TreeNode p;
        while(!top.isEmpty()) {
            list = new LinkedList();
            topLength = top.size();
            for(int i = 0; i < topLength; i++) {
                p = top.remove();
                if(p.left != null)
                    top.add(p.left);
                if(p.right != null)
                    top.add(p.right);
                list.add(p.val);
            }
            bottomLevel.add(list);
        }
        
        while(!bottomLevel.isEmpty())
            lists.add(bottomLevel.pop());
        return lists;
    }
}
