/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 * 
 * Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.
 *  
 * The number of nodes in both lists is in the range [0, 50].
 * -100 <= Node.val <= 100
 * Both l1 and l2 are sorted in non-decreasing order.
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null)
            return l2;
        else if(l2 == null)
            return l1;
        
        ListNode list = null;
        if(l1.val <= l2.val) {
            list = l1;
            l1 = l1.next;
        }
        else {
            list = l2;
            l2 = l2.next;
        }
        ListNode head = list;
        
        while(l1 != null && l2 != null) {
            if(l1.val <= l2.val) {
                list.next = l1;
                l1 = l1.next;
            }
            else {
                list.next = l2;
                l2 = l2.next;
            }
            list = list.next;
        }
        
        if(l1 == null && l2 != null) 
            list.next = l2;
        else if(l1 != null && l2 == null) 
            list.next = l1;
        
        return head;
    }
}


class prashant404 {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
	    if (l1 == null)
		    return l2;
	    if (l2 == null)
		    return l1;
	    if (l1.val < l2.val) {
		    l1.next = mergeTwoLists(l1.next, l2);
		    return l1;
	    } 
	    l2.next = mergeTwoLists(l1, l2.next);
	    return l2;
    }
}
