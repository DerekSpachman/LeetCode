/**
 * Given the root of a binary tree, return the sum of all left leaves.
 */

class Solution {
    public int sumOfLeftLeaves(TreeNode root) {
        //return sumOfLeftLeaves(root, false);
        
        Stack<TreeNode> stack = new Stack();
        stack.push(root);
        TreeNode p;
        int sum = 0;
        while(!stack.isEmpty()) {
            p = stack.pop();
            if(p.left != null) {
                stack.push(p.left);
                if(p.left.left == null && p.left.right == null)
                    sum += p.left.val;
            }
            if(p.right != null)
                stack.push(p.right);
        }
        return sum;
    }
    
    public int sumOfLeftLeaves(TreeNode p, boolean isLeft) {
        if(p == null)
            return 0;
        if(isLeft && p.left == null && p.right == null)
            return p.val;
        
        int left = sumOfLeftLeaves(p.left, true);
        int right = sumOfLeftLeaves(p.right, false);
        return left + right;
    }
}
