/*
 * Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if    the input string is valid.
 * 
 * An input string is valid if: 
 *      Open brackets must be closed by the same type of brackets.
 *      Open brackets must be closed in the correct order.
*/
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack();
        for(int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '(' || s.charAt(i) == '[' || s.charAt(i) == '{')
                stack.push(s.charAt(i));
            else if(!stack.isEmpty() && (
                    s.charAt(i) == ')' && stack.peek() == '(' ||
                    s.charAt(i) == ']' && stack.peek() == '[' ||
                    s.charAt(i) == '}' && stack.peek() == '{'))
                stack.pop();
            else
                return false;
        }
        return stack.isEmpty();
    }
}



class uzair120 {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            if(c == '(' || c == '{' || c == '[')
                stack.push(c);
            else if (stack.isEmpty())
                return false;
            else if(c == ')'){
                char openning = stack.pop();
                if(openning != '(')
                    return false;
            }
            else if(c == '}'){
                char openning = stack.pop();
                if(openning != '{')
                    return false;
            }
            else if(c == ']'){
                char openning = stack.pop();
                if(openning != '[')
                    return false;
            }      
        }
        if(stack.isEmpty())
            return true;
        return false;
    }
}
