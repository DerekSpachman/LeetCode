/*
 * Given a n-ary tree, find its maximum depth.
 * 
 * The total number of nodes is in the range [0, 104].
 * The depth of the n-ary tree is less than or equal to 1000.



// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public int maxDepth(Node root) {
        if(root == null)
            return 0;
        if(root.children == null)
            return 1;
        
        LinkedList<Node> queue = new LinkedList();
        queue.add(root);
        Node p;
        int level = 0;
        while(queue.size() > 0) {
            int size=queue.size();
            level++;
            for(int i = 0; i < size; i++) {
                p = queue.remove();
                for(Node c : p.children)
                    queue.add(c);
            }
        }
        
        return level;
    }
}



class Madhav1301 {
    public int maxDepth(Node root) {
        if(root == null){
            return 0;
        }
        
        int max_Depth = 0;
        
        for(Node child: root.children){
            max_Depth = Math.max(max_Depth,maxDepth(child));
        }
        return max_Depth+1;
    }
}
