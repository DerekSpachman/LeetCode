/**
 * You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. 
 * The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
 * 
 * Increment the large integer by one and return the resulting array of digits.
 * 
 * 1 <= digits.length <= 100
 * 0 <= digits[i] <= 9
 * digits does not contain any leading 0's.
 */

class Solution {
    public int[] plusOne(int[] digits) {
        int length = digits.length - 1;
        digits[length] += 1;
        boolean carry = false;
        if(digits[length] > 9) {
            digits[length] %= 10;
            carry = true;
        }
        for(int i = length - 1; carry && i > -1; i--) {
            if(digits[i] + 1 > 9)
                digits[i] = (digits[i] + 1) % 10;
            else {
                digits[i] += 1;
                carry = false;
            }
        }
        
        if(carry) {
            int temp[] = new int[digits.length + 1];
            temp[0] = 1;
            for(int i = 2; i < temp.length; i++)
                temp[i] = digits[i - 1];
            return temp;
        }
        return digits;
    }
}



class pritammittal {
    public int[] plusOne(int[] digits) {
        int i=digits.length-1;
        while(i>=0 && digits[i]==9){
            digits[i]=0;
            i--;
        }
        if(i==-1){
            int []ans=new int[digits.length+1];
            
            ans[0]=1;
            return ans;
            
        }
        digits[i]++;
        return digits;
    }
}
