/**
 * Given the root of a binary tree, return its maximum depth.
 * 
 * The number of nodes in the tree is in the range [0, 104].
 * -100 <= Node.val <= 100
 * 
 * 
 * 
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        return bfs(root);
    }
    
    private int bfs(TreeNode root) {
        if(root == null)
            return 0;
        
        LinkedList<TreeNode> queue = new LinkedList();
        queue.add(root);
        TreeNode p = new TreeNode();
        int level = 0;
        int size = 0;
        while(!queue.isEmpty()) {
            level++;
            size = queue.size();
            for(int i = 0; i < size; i++) {
                p = queue.remove();
                if(p.left != null)
                    queue.add(p.left);
                if(p.right != null)
                    queue.add(p.right);
            }
        }
        
        return level;
    }
    
    private int dfs(TreeNode p) {
        if(p == null)
            return 0;
        
        int left = dfs(p.left) + 1;
        int right = dfs(p.right) + 1;
        return left < right ? right : left;
    }
}

class Madhav1301 {
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        
        if(root.left == null && root.right == null){
            return 1;
        }
        
        return Math.max(maxDepth(root.left), maxDepth(root.right))+1;
    }
}
